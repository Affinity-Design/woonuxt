const { resolve } = require("path");
const { readFileSync, writeFileSync, existsSync } = require("fs");

/**
 * Generate dynamic route rules for Nuxt config based on discovered blog posts
 */
function generateRouteRules() {
  try {
    console.log("üîÑ Generating dynamic route rules for blog redirects...");

    const blogSlugsPath = resolve(__dirname, "..", "data", "blog-slugs.json");

    if (!existsSync(blogSlugsPath)) {
      console.warn("Blog slugs file not found, skipping redirect generation");
      return;
    }

    const blogSlugs = JSON.parse(readFileSync(blogSlugsPath, "utf8"));

    // Generate route rules for redirects
    const redirectRules = blogSlugs
      .map(
        (slug) =>
          `    "/${slug}": { redirect: { to: "/blog/${slug}", statusCode: 301 } },`
      )
      .join("\n");

    console.log(`Generated ${blogSlugs.length} redirect rules for blog posts:`);
    blogSlugs.forEach((slug) => {
      console.log(`  /${slug} ‚Üí /blog/${slug}`);
    });

    // Write to a separate file that can be imported
    const routeRulesContent = `// Auto-generated blog redirect rules
// This file is generated by scripts/generate-route-rules.js
// Do not edit manually - it will be overwritten on build

module.exports = {
${redirectRules}
};
`;

    const outputPath = resolve(__dirname, "..", "data", "blog-redirects.js");
    writeFileSync(outputPath, routeRulesContent);
    console.log(`Route rules written to: ${outputPath}`);

    // Also create a JSON version for easy reading
    const redirectsJson = {};
    blogSlugs.forEach((slug) => {
      redirectsJson[`/${slug}`] = {
        redirect: { to: `/blog/${slug}`, statusCode: 301 },
      };
    });

    const redirectsJsonPath = resolve(
      __dirname,
      "..",
      "data",
      "blog-redirects.json"
    );
    writeFileSync(redirectsJsonPath, JSON.stringify(redirectsJson, null, 2));
    console.log(`Redirect rules JSON written to: ${redirectsJsonPath}`);

    return redirectsJson;
  } catch (error) {
    console.error("‚ùå Error generating route rules:", error);
    throw error;
  }
}

// Run if called directly
if (require.main === module) {
  generateRouteRules()
    .then(() => {
      console.log("‚úÖ Route rules generation completed successfully");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Route rules generation failed:", error);
      process.exit(1);
    });
}

module.exports = { generateRouteRules };
